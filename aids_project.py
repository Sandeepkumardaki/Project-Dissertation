# -*- coding: utf-8 -*-
"""AIDS_Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jbQc8RolweDpYozKe5h_T8YwjE6unqxv
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = '/AIDS_Classification_50000.csv'
data = pd.read_csv(file_path)

# Display the first few rows of the dataset to understand its structure
data.head(), data.info(), data.describe()

# Set up the visualizations
plt.figure(figsize=(20, 15))


# Distribution of the target variable 'infected'
plt.subplot(2, 3, 1)
sns.countplot(x='infected', data=data)
plt.title('Distribution of Infection Status')

# Distribution of age
plt.subplot(2, 3, 2)
sns.histplot(data['age'], kde=True)
plt.title('Age Distribution')

# Distribution of weight (wtkg)
plt.subplot(2, 3, 3)
sns.histplot(data['wtkg'], kde=True)
plt.title('Weight Distribution')

# Boxplot of age vs. infection status
plt.subplot(2, 3, 4)
sns.boxplot(x='infected', y='age', data=data)
plt.title('Age vs. Infection Status')

# Boxplot of weight vs. infection status
plt.subplot(2, 3, 5)
sns.boxplot(x='infected', y='wtkg', data=data)
plt.title('Weight vs. Infection Status')

plt.tight_layout()
plt.show()

# Correlation heatmap
plt.figure(figsize=(20, 15))
correlation_matrix = data.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.feature_selection import SelectKBest, f_classif

# Splitting the data into features and target variable
X = data.drop('infected', axis=1)
y = data['infected']

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Feature selection
selector = SelectKBest(score_func=f_classif, k=10)
X_train_selected = selector.fit_transform(X_train_scaled, y_train)
X_test_selected = selector.transform(X_test_scaled)

# Get selected features' names
selected_features = X.columns[selector.get_support()]

# Train a RandomForest Classifier as an example
rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train_selected, y_train)

# Predictions
y_pred = rf_model.predict(X_test_selected)

# Evaluation
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

accuracy, report, conf_matrix, selected_features

print(selected_features)
print(report)
import joblib

# Save the model to a file
model_filename = 'random_forest_model_aids.pkl'
joblib.dump(rf_model, model_filename)

print(f"Model saved as {model_filename}")

from sklearn.linear_model import LogisticRegression
from xgboost import XGBClassifier

# Train a Logistic Regression model
lr_model = LogisticRegression(random_state=42, max_iter=1000)
lr_model.fit(X_train_selected, y_train)

# Predictions with Logistic Regression
y_pred_lr = lr_model.predict(X_test_selected)

# Evaluation for Logistic Regression
accuracy_lr = accuracy_score(y_test, y_pred_lr)
report_lr = classification_report(y_test, y_pred_lr)
conf_matrix_lr = confusion_matrix(y_test, y_pred_lr)

# Train an XGBoost Classifier
xgb_model = XGBClassifier(random_state=42, eval_metric='logloss')
xgb_model.fit(X_train_selected, y_train)

# Predictions with XGBoost
y_pred_xgb = xgb_model.predict(X_test_selected)

# Evaluation for XGBoost
accuracy_xgb = accuracy_score(y_test, y_pred_xgb)
report_xgb = classification_report(y_test, y_pred_xgb)
conf_matrix_xgb = confusion_matrix(y_test, y_pred_xgb)

# accuracy, report, conf_matrix, selected_features

# Print all the results
print("Random Forest Results:")
print("Accuracy:", accuracy)
print("Classification Report:\n", report)
print("Confusion Matrix:\n", conf_matrix)

print("\nLogistic Regression Results:")
print("Accuracy:", accuracy_lr)
print("Classification Report:\n", report_lr)
print("Confusion Matrix:\n", conf_matrix_lr)

print("\nXGBoost Results:")
print("Accuracy:", accuracy_xgb)
print("Classification Report:\n", report_xgb)
print("Confusion Matrix:\n", conf_matrix_xgb)

print("\nSelected Features:\n", selected_features)